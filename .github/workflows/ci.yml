name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          tesseract-ocr \
          tesseract-ocr-eng \
          libtesseract-dev \
          poppler-utils \
          libopencv-dev

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -e .

    - name: Download spaCy model
      run: |
        python -m spacy download en_core_web_sm
      continue-on-error: true

    - name: Generate demo data
      run: |
        cd demo_data
        python generate_demo_data.py

    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
      continue-on-error: false

    - name: Test CLI help
      run: |
        python -m blurify.cli --help

    - name: Test CLI dry run
      run: |
        python -m blurify.cli --input demo_data/sample1.jpg --output output/ --dry-run

    - name: Test actual processing (if OCR available)
      run: |
        python -m blurify.cli --input demo_data/sample1.jpg --output output/ --mode blur
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          output/
          *.log

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run black
      run: |
        black --check --diff blurify/ tests/ eval/
      continue-on-error: true

    - name: Run isort
      run: |
        isort --check-only --diff blurify/ tests/ eval/
      continue-on-error: true

    - name: Run flake8
      run: |
        flake8 blurify/ tests/ eval/ --max-line-length=100 --ignore=E203,W503
      continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t blurify:test .

    - name: Test Docker image
      run: |
        # Test CLI help
        docker run --rm blurify:test python -m blurify.cli --help
        
        # Test that required packages are installed
        docker run --rm blurify:test python -c "import blurify; print('Blurify imported successfully')"
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security check
      run: |
        bandit -r blurify/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check
      continue-on-error: true

    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: |
          bandit-report.json

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check README
      run: |
        if [ ! -f README.md ]; then
          echo "README.md is missing!"
          exit 1
        fi
        
        # Check that README has basic sections
        grep -q "Installation" README.md || (echo "README missing Installation section" && exit 1)
        grep -q "Usage" README.md || (echo "README missing Usage section" && exit 1)
        
        echo "README.md looks good!"

    - name: Check LICENSE
      run: |
        if [ ! -f LICENSE ]; then
          echo "LICENSE file is missing!"
          exit 1
        fi
        echo "LICENSE file exists!"

    - name: Check requirements.txt
      run: |
        if [ ! -f requirements.txt ]; then
          echo "requirements.txt is missing!"
          exit 1
        fi
        
        # Check that basic dependencies are listed
        grep -q "numpy" requirements.txt || (echo "numpy missing from requirements" && exit 1)
        grep -q "opencv-python" requirements.txt || (echo "opencv-python missing" && exit 1)
        grep -q "Pillow" requirements.txt || (echo "Pillow missing" && exit 1)
        
        echo "requirements.txt looks good!"
